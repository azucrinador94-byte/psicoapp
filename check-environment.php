<?php
/**
 * Script de Diagn√≥stico - PsicoApp
 * Execute: php check-environment.php
 */

echo "üîç VERIFICANDO AMBIENTE PSICOAPP\n";
echo str_repeat("=", 50) . "\n\n";

// Verificar vers√£o PHP
echo "üì¶ PHP\n";
echo "  Vers√£o: " . PHP_VERSION;
if (version_compare(PHP_VERSION, '7.4.0') >= 0) {
    echo " ‚úÖ\n";
} else {
    echo " ‚ùå (m√≠nimo 7.4)\n";
}

// Verificar extens√µes obrigat√≥rias
echo "\nüìö Extens√µes PHP Obrigat√≥rias:\n";
$required_extensions = [
    'pdo' => 'PDO',
    'pdo_mysql' => 'PDO MySQL',
    'session' => 'Session',
    'json' => 'JSON',
    'mbstring' => 'Multibyte String',
    'openssl' => 'OpenSSL'
];

foreach ($required_extensions as $ext => $name) {
    $loaded = extension_loaded($ext);
    echo "  $name: " . ($loaded ? "‚úÖ" : "‚ùå") . "\n";
    if (!$loaded) {
        echo "    ‚ö†Ô∏è  Ativar em php.ini: extension=$ext\n";
    }
}

// Verificar conex√£o MySQL
echo "\nüóÑÔ∏è  Banco de Dados:\n";
try {
    require_once 'config/database.php';
    $db = new Database();
    $conn = $db->connect();
    
    if ($conn) {
        echo "  Conex√£o MySQL: ‚úÖ\n";
        
        // Verificar se o banco existe
        $stmt = $conn->query("SHOW DATABASES LIKE 'psicoapp'");
        $db_exists = $stmt->rowCount() > 0;
        echo "  Banco 'psicoapp': " . ($db_exists ? "‚úÖ" : "‚ùå (executar setup.sql)") . "\n";
        
        if ($db_exists) {
            // Verificar tabelas
            $conn->query("USE psicoapp");
            $required_tables = [
                'users',
                'patients',
                'appointments',
                'patient_pricing',
                'patient_anamnesis',
                'consultation_history'
            ];
            
            echo "\n  üìã Tabelas:\n";
            foreach ($required_tables as $table) {
                $stmt = $conn->query("SHOW TABLES LIKE '$table'");
                $exists = $stmt->rowCount() > 0;
                echo "    $table: " . ($exists ? "‚úÖ" : "‚ùå") . "\n";
            }
            
            // Contar registros
            echo "\n  üìä Dados:\n";
            $stmt = $conn->query("SELECT COUNT(*) as count FROM users");
            $users = $stmt->fetch(PDO::FETCH_ASSOC);
            echo "    Usu√°rios cadastrados: " . $users['count'] . "\n";
            
            $stmt = $conn->query("SELECT COUNT(*) as count FROM patients");
            $patients = $stmt->fetch(PDO::FETCH_ASSOC);
            echo "    Pacientes cadastrados: " . $patients['count'] . "\n";
        }
    }
} catch (Exception $e) {
    echo "  Conex√£o MySQL: ‚ùå\n";
    echo "  Erro: " . $e->getMessage() . "\n";
    echo "\n  ‚ö†Ô∏è  Solu√ß√µes:\n";
    echo "    1. Verificar se MySQL est√° rodando\n";
    echo "    2. Conferir credenciais em config/database.php\n";
    echo "    3. Criar banco: mysql -u root -p < database/setup.sql\n";
}

// Verificar arquivos cr√≠ticos
echo "\nüìÅ Arquivos Cr√≠ticos:\n";
$critical_files = [
    'config/database.php' => 'Configura√ß√£o BD',
    'database/setup.sql' => 'Script instala√ß√£o',
    'database/migration.sql' => 'Script atualiza√ß√£o',
    'login.php' => 'Login PHP',
    'index.php' => 'App PHP',
    'index.html' => 'App React',
    'api/patients.php' => 'API Pacientes',
    'api/appointments.php' => 'API Consultas',
];

foreach ($critical_files as $file => $desc) {
    echo "  $desc: " . (file_exists($file) ? "‚úÖ" : "‚ùå") . "\n";
}

// Verificar permiss√µes
echo "\nüîê Permiss√µes:\n";
$writable_dirs = [
    './' => 'Diret√≥rio raiz'
];

foreach ($writable_dirs as $dir => $desc) {
    echo "  $desc: " . (is_writable($dir) ? "‚úÖ" : "‚ùå (ajustar permiss√µes)") . "\n";
}

// Verificar configura√ß√µes PHP
echo "\n‚öôÔ∏è  Configura√ß√µes PHP:\n";
$settings = [
    'session.auto_start' => ['0', 'desligado'],
    'display_errors' => ['1', 'ligado (dev)'],
    'date.timezone' => ['America/Sao_Paulo', 'configurado']
];

foreach ($settings as $key => $expected) {
    $value = ini_get($key);
    $status = !empty($value) ? "‚úÖ" : "‚ö†Ô∏è";
    echo "  $key: $value $status\n";
}

// Verificar Node.js (para desenvolvimento)
echo "\nüü¢ Node.js (Desenvolvimento):\n";
exec('node --version 2>&1', $node_output, $node_return);
if ($node_return === 0) {
    echo "  Node.js: " . $node_output[0] . " ‚úÖ\n";
} else {
    echo "  Node.js: ‚ùå (n√£o instalado)\n";
    echo "    ‚ö†Ô∏è  Necess√°rio para desenvolvimento React\n";
}

exec('npm --version 2>&1', $npm_output, $npm_return);
if ($npm_return === 0) {
    echo "  npm: " . $npm_output[0] . " ‚úÖ\n";
} else {
    echo "  npm: ‚ùå (n√£o instalado)\n";
}

// Resumo final
echo "\n" . str_repeat("=", 50) . "\n";
echo "üìã RESUMO:\n\n";

if (extension_loaded('pdo_mysql') && isset($conn) && $conn) {
    echo "‚úÖ Backend PHP est√° OK!\n";
    echo "   Acesse: http://localhost/psicoapp/index.php\n\n";
} else {
    echo "‚ùå Backend PHP precisa de ajustes!\n";
    echo "   Veja os erros acima.\n\n";
}

if ($node_return === 0) {
    echo "‚úÖ Ambiente React est√° OK!\n";
    echo "   Execute: npm install && npm run dev\n";
    echo "   Acesse: http://localhost:8080\n\n";
} else {
    echo "‚ö†Ô∏è  Node.js n√£o detectado (apenas para desenvolvimento)\n\n";
}

echo "üìö Documenta√ß√£o completa: DIAGNOSTIC_PRODUCTION.md\n";
echo str_repeat("=", 50) . "\n";
?>
